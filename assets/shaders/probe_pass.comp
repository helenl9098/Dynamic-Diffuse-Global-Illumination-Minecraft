#version 450
#extension GL_GOOGLE_include_directive : require

#define PI 3.1415926535897932384626433832795
#define RAY_MIN_DIST 0.01
#define EPSILON 0.005
#define MARCH_ITER 32
#define MARCH_EPS 0.1
#define INF 1.0/0.0

#include "structs.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform RenderSettings
{
    int screen_width;
    int screen_height;
    int max_bounces;
    int camera_mode;
    int render_mode;
    int scene;
	float time;
    bool visualize_probes;
}
render_settings;

layout(std430, binding = 1) buffer ProbeRays { ProbeRay rays[]; };

layout(binding = 2, rgba8) uniform image2D probe_image_albedo;
layout(binding = 3, rgba8) uniform image2D probe_image_distances;

layout(binding = 4) uniform IrradianceField
{
    ivec3 probe_count;
    int side_length;
    float hysteresis;
    int sqrt_rays_per_probe;
    vec3 field_origin;
} irradiance_field;


//// TAKEN FROM UTILS.GLSL (file not included because of absent variables) ///////

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

uint p_idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y
				* irradiance_field.probe_count.x * irradiance_field.probe_count.z * irradiance_field.sqrt_rays_per_probe;
uint rng_state = wang_hash(p_idx);

uint rand_xorshift()
{
    // Xorshift algorithm from George Marsaglia's paper
    rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);
    return rng_state;
}

float rand()
{
    return rand_xorshift() / 4294967296.0;
}

void construct_orthonormal_basis_Pixar

	(out vec3 e0,   /* x basis vector */
	 out vec3 e1,   /* y basis vector */
	 in  vec3 e2)   /* z basis vector */

/*
	Given a vector e2 generates an orthonormal basis: {e0, e1, e2}.
	
	Code from:
	Building an Orthonormal Basis, Revisited, (JCGT), vol. 6, no. 1, 1-8, 2017
	Available online: http://jcgt.org/published/0006/01/01/
*/

{
	float sign = e2.z < 0.0 ? -1.0 : 1.0;
	float a = -1.0 / (sign + e2.z);
	float b = e2.x * e2.y * a;
	e0 = vec3(1.0 + sign * e2.x * e2.x * a, sign * b, -sign * e2.x);
	e1 = vec3(b, sign + e2.y * e2.y * a, -e2.y);
	
	return;
	
} /* construct_orthonormal_basis_Pixar */

vec3 map_to_unit_hemisphere_around_normal

	(float phi,        /* azimuth angle */ 
	 float cos_theta,  /* cosine of the polar angle */
	 float sin_theta,  /* sine of the polar angle */
	 vec3  n)          /* unit normal */

/*
	Given the azimuthal and polar angles in spherical coordinates 
	returns the Cartesian coordinates of the point with these angles 
	on the unit hemisphere centered around the normal `n`.
	
	x = r * cos(phi) * sin(theta)
	y = r * sin(phi) * sin(theta)
	z = r * cos(theta)
*/

{

	float x = cos(phi) * sin_theta;
	float y = sin(phi) * sin_theta;
	float z = cos_theta;

	vec3 e0, e1;
	construct_orthonormal_basis_Pixar (e0, e1, n);
	
	return x * e0 + y * e1 + z * n;

} /* map_to_unit_hemisphere_around_normal */

////////////////////// MAIN //////////////////////////

#include "samples_mapping.glsl"
#include "intersection.glsl"
#include "distance_functions.glsl"
#include "material.glsl"
#include "integrators.glsl"

// Gets the bottom left corner of the probe texture at 
// the specified index.

ivec2 get_texture_coords_of_probe_index(int index) {
	int texture_width = irradiance_field.probe_count.x * irradiance_field.probe_count.z;
	int y_probe = index / texture_width;
	int x_probe = index - (y_probe * texture_width);

	return ivec2(x_probe, y_probe) * irradiance_field.sqrt_rays_per_probe;
}

#define TWO_PI            6.2831853071795864769252867665590057683943f
#define SQRT_OF_ONE_THIRD 0.5773502691896257645091487805019574556476f

vec3 calculate_random_dir_hemisphere(vec3 normal) {
    float up = sqrt(rand()); // cos(theta)
    float over = sqrt(1 - up * up); // sin(theta)
    float around = rand() * TWO_PI;

    // Find a direction that is not the normal based off of whether or not the
    // normal's components are all equal to sqrt(1/3) or whether or not at
    // least one component is less than sqrt(1/3). Learned this trick from
    // Peter Kutz.

    vec3 directionNotNormal;
    if (abs(normal.x) < SQRT_OF_ONE_THIRD) {
        directionNotNormal = vec3(1, 0, 0);
    } else if (abs(normal.y) < SQRT_OF_ONE_THIRD) {
        directionNotNormal = vec3(0, 1, 0);
    } else {
        directionNotNormal = vec3(0, 0, 1);
    }

    // Use not-normal direction to generate two perpendicular directions
    vec3 perpendicularDirection1 =
        normalize(cross(normal, directionNotNormal));
    vec3 perpendicularDirection2 =
        normalize(cross(normal, perpendicularDirection1));

    return up * normal
        + cos(around) * over * perpendicularDirection1
        + sin(around) * over * perpendicularDirection2;
}

vec3 get_direct_lighting(Isect info) {


	vec3 direct_lighting = vec3(0.f);
    int num_visible_lights = 0;
	bool hit_scene = false;
    for (int i = 0; i < num_lights[render_settings.scene]; i++)
    {
        Light l = get_light(render_settings.scene, i);
        Ray light_feeler = Ray(info.pos, normalize(l.pos - info.pos));
		Isect temp_info;
        if (intersect_scene(light_feeler, 0, INF, temp_info))
        {
			hit_scene = true;
			float lambert =
                    clamp(dot(normalize(info.normal),
                              normalize(l.pos - info.pos)),
                          0.0, 1.0);
            if (temp_info.type == 2)
            {
				float dist = distance(l.pos, info.pos);
                direct_lighting += lambert * l.col * l.intensity / (dist);
            } else {
				return 0.2 * info.mat.base_color * lambert; // aesthetic choice to avoid dark renders / shadows
			}
			num_visible_lights++;
        }
    }

	if (num_visible_lights != 0)
    {
        return info.mat.base_color * direct_lighting / num_visible_lights;
    }

	return vec3(0, 0, 0);
}

void update_lights() {
    // minecraft cave scene light animations
    for (int i = 0; i < num_lights[0]; i++) {
        
        float t = 0.05f * render_settings.time;

        if (i == 0) {
            float x = lights_0[i].pos.x;
            float y = lights_0[i].pos.y;
            float z = lights_0[i].pos.z + 10 * cos(t * 0.1);
			lights_0[i].pos = vec3(lights_0[i].pos.x, y, z);
            continue;
        }
        
        float x = lights_0[i].pos.x + (i + 1) * 2 * sin(t * 0.5);
        float y = lights_0[i].pos.y + (i / 2) * 4 * sin(t * 0.5);
        float z = lights_0[i].pos.z + (i + 1) * 2 * cos(t * 0.5);
        lights_0[i].pos = vec3(x, y, z);
     }
    

    // cornell box light animations
    for (int i = 0; i < num_lights[1]; i++) {
        float t = 0.005f * render_settings.time;
        float x = lights_1[i].pos.x + (i + 1) * sin(t);
        float y = lights_1[i].pos.y + (i / 2) * 4 * sin(t);
        float z = lights_1[i].pos.z + (i + 1) * cos(t);
        lights_1[i].pos = vec3(x, y, z);
        // lights_1[i].pos -= vec3(0.005f * render_settings.time);
    }

    for (int i = 0; i < num_lights[2]; i++) {
        lights_2[i].pos += vec3(0.00005f * render_settings.time);
    }
}

void main() {
	//update_lights();

	int texture_width = irradiance_field.probe_count.x * irradiance_field.probe_count.z
							* irradiance_field.sqrt_rays_per_probe;
	
	ivec2 thread_coords = ivec2(gl_GlobalInvocationID.xy);
	int index = texture_width * thread_coords.y + thread_coords.x;

	int num_rays_per_probe = irradiance_field.sqrt_rays_per_probe
								* irradiance_field.sqrt_rays_per_probe;

	ProbeRay probe_ray = rays[index];
	Ray r = Ray(probe_ray.origin, probe_ray.direction);
	Isect hit_info;

	int probe_index = int(probe_ray.probe_info.x);
	ivec2 texture_coords = get_texture_coords_of_probe_index(probe_index);
	texture_coords += ivec2(probe_ray.probe_info.yz);

	bool first_bounce = true;
	vec3 color = vec3(0.0);
	vec3 normal = vec3(0.0);
	vec2 distances = vec2(0.0);
	
	vec3 throughput = vec3(1.0);
	vec3 light_vec = vec3(0.0);
	vec3 dir_light_term = vec3(0.0);
	float lambert = 0.0;

	Ray indirect_ray = r;
	for(int i = 0; i < render_settings.max_bounces; i++) {
		if (intersect_scene(indirect_ray, 0, INF, hit_info)) {
			vec3 indirect_color_contribution = get_direct_lighting(hit_info);
			color += indirect_color_contribution;
		} else {
			break;
		}

		indirect_ray = Ray(hit_info.pos + 0.0001 * hit_info.normal, calculate_random_dir_hemisphere(hit_info.normal));
	}

	color /= render_settings.max_bounces;

	
	/*vec3 old_color = vec3(imageLoad(probe_image_albedo, texture_coords));
	color = mix(old_color, color, irradiance_field.hysteresis);*/

	imageStore(probe_image_albedo, texture_coords, vec4(color, 1.0));
	imageStore(probe_image_distances, texture_coords, vec4(distances, 0.0, 0.0));
}